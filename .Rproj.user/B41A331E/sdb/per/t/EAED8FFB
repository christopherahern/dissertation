{
    "contents" : "library(ggplot2)\nlibrary(dplyr)\nlibrary(reshape)\n\np = seq(0,1,.001)\nf = function(a,b,x) a*x/(a*x + b*(1-x))\nplot(p, f(.5, .1,p))\nabline(0,1, lty=2)\ng = function(a,b,x) a*x/(a*x + b*(1-x)) - x\nplot(p, g(.5, .1,p), ylim=c(0,1))\nabline(0,1, lty=2)\nh = function(a,b,x) -a*b*log(a*b - b**2 + x*(a**2 - 2*a*b + b**2))/(a - b)**2 + a*x/(a - b) - x**2/2\nplot(p, h(.5, .1,p), ylim=c(0,2))\nabline(0,1, lty=2)\n\ngenerate.p = function(init.p,a,b,n) {\n  vector = rep(0, n)\n  vector[1] = init.p\n  for (i in 2:n){\n    vector[i] = vector[i-1] + g(a,b,vector[i-1])\n  }\n  return(vector)\n}\n\ngenerate.q = function(init.p,a,b,n) {\n  vector = rep(0, n)\n  vector[1] = init.p\n  for (i in 2:n){\n    vector[i] = vector[i-1] + g(a,b,vector[i-1])*(i/n)\n  }\n  return(vector)\n}\nq.test = generate.q(.1, .8, .3, 10)\npar(mar=c(5,5.4,4.1,2.1))\nplot(q.test, ylim=c(0,1), xlab=\"Time\", ylab=expression(\"p\"[\"neg V neg\"]), type=\"l\", cex.lab=2)\ntext(3,.8, expression(b > frac(1,4)), cex=2)\n\npar(mar=c(5,5,4.1,2.1))\ntest = generate.p(.01, .9, .2, 10)\nplot(test, ylim=c(0,1), xlab=\"Time\", ylab=expression(\"p\"[\"not\"]), type=\"l\", cex.lab=2)\ntext(3,.8, expression(frac(beta, alpha) > 1), cex=2)\n\ntest = generate.p(.1, .2, .9, 10)\nplot(test, ylim=c(0,1), xlab=\"Time\", ylab=expression(\"p\"[\"not\"]), type=\"l\", cex.lab=2)\ntext(3,.8, expression(frac(beta, alpha) < 1), cex=2)\n\nx <- seq(0, 1, length=100)\nhx <- dbeta(x, 1, 3)\nplot(x, hx, type=\"l\", xlab=\"T\", ylab='Density', axes=F)\nAxis(side=1, at=c(0,1))\n# Axis(side=2, at=c(0,3))\nlibrary(ggplot2)\nx <- seq(0, 1, len = 100)\np <- qplot(x, geom = \"blank\")\nstat <- stat_function(aes(x = x, y = ..y..), fun = dbeta, colour=\"red\", n = 1000,\n                      args = list(shape1 = 1, shape2 = 3))\np + stat\n\n\n# Drift 1\ndrift1.full = read.csv('drift1.csv', header=T, sep=\",\")\ndrift1 = data.frame(time = as.numeric(drift1.full$x),\n                    blue = as.numeric(drift1.full$y),\n                    red = as.numeric(drift1.full$y.1))\ndrift1 = tbl_df(drift1)\ndrift1 = drift1 %>% mutate(total = blue + red) %>% mutate(blue.p = blue/total) %>% mutate(red.p = red/total)\n  \nggplot() + geom_line(data=drift1, aes(x=time, y=blue.p), color='blue') + \n  geom_line(data=drift1, aes(x=time, y=red.p), color='red') + ylab(\"Proportion\") + xlab(\"Time\") +     theme(text = element_text(size=20))\n\n\n# Drift 2\ndrift2.full = read.csv('drift2.csv', header=T, sep=\",\")\ndrift2 = data.frame(time = as.numeric(drift2.full$x),\n                    blue = as.numeric(drift2.full$y),\n                    red = as.numeric(drift2.full$y.1))\ndrift2 = tbl_df(drift2)\ndrift2 = drift2 %>% mutate(total = blue + red) %>% mutate(blue.p = blue/total) %>% mutate(red.p = red/total)\n\nggplot() + geom_line(data=drift2, aes(x=time, y=blue.p), color='blue') + \n  geom_line(data=drift2, aes(x=time, y=red.p), color='red') + ylab(\"Proportion\") + xlab(\"Time\") +     theme(text = element_text(size=20))\n\n# Drift 3\ndrift3.full = read.csv('drift3.csv', header=T, sep=\",\")\ndrift3 = data.frame(time = as.numeric(drift3.full$x),\n                    blue = as.numeric(drift3.full$y),\n                    red = as.numeric(drift3.full$y.1))\ndrift3 = tbl_df(drift3)\ndrift3 = drift3 %>% mutate(total = blue + red) %>% mutate(blue.p = blue/total) %>% mutate(red.p = red/total)\n\nggplot() + geom_line(data=drift3, aes(x=time, y=blue.p), color='blue') + scale_x_continuous(limits=c(0,6000),breaks=c(0, 1000, 2000, 3000, 4000, 5000, 6000)) + \n  geom_line(data=drift3, aes(x=time, y=red.p), color='red') + ylab(\"Proportion\") + xlab(\"Time\") +     theme(text = element_text(size=20))\n\n# Selection 1\nselection1.full = read.csv('selection1.csv', header=T, sep=\",\")\nselection1 = data.frame(time = as.numeric(selection1.full$x),\n                    blue = as.numeric(selection1.full$y),\n                    red = as.numeric(selection1.full$y.1))\nselection1 = tbl_df(selection1)\nselection1 = selection1 %>% mutate(total = blue + red) %>% mutate(blue.p = blue/total) %>% mutate(red.p = red/total)\n\nggplot() + geom_line(data=selection1, aes(x=time, y=blue.p), color='blue') + scale_x_continuous(breaks=c(0, 1000, 2000, 3000, 4000, 5000, 6000)) + \n  geom_line(data=selection1, aes(x=time, y=red.p), color='red') + ylab(\"Proportion\") + xlab(\"Time\") +     theme(text = element_text(size=20))\n# Selection 2\nselection2.full = read.csv('selection2.csv', header=T, sep=\",\")\nselection2 = data.frame(time = as.numeric(selection2.full$x),\n                        blue = as.numeric(selection2.full$y),\n                        red = as.numeric(selection2.full$y.1))\nselection2 = tbl_df(selection2)\nselection2 = selection2 %>% mutate(total = blue + red) %>% mutate(blue.p = blue/total) %>% mutate(red.p = red/total)\n\nggplot() + geom_line(data=selection2, aes(x=time, y=blue.p), color='blue') + \n  geom_line(data=selection2, aes(x=time, y=red.p), color='red') + ylab(\"Proportion\") + xlab(\"Time\") +     theme(text = element_text(size=20))\n\n# Generate map for plotting languages involved with Jespersen's Cycle\nlibrary(ggmap)\nlibrary(mapproj)\njc.data = read.csv(file='~/Dropbox/ucsd/code/test.csv',header=T)\nnewmap <- getMap(resolution = \"low\")\nplot(newmap)\npoints(jc.data$longitude, jc.data$latitude, col = \"red\", cex = .6, pch=16)\n#############################################################################\nlibrary(VGAM)\n# Beta-binomial distribution where alpha=1, beta=2, and n=100\nt.probs = dbetabinom.ab(x=1:100, size=100, shape1=1, shape2=2)\n# Cumulative distribution is roughly 10% matching starting state when t^* = 68\nsum(t.probs[68:100])\n# Create initial distributions\nepsilon = .05 # epsilon is distributed to other strategies\ns.probs = rep(epsilon/100, 100)\ns.probs[68] = 1 - (99/100)*epsilon # sum(s.probs) length(s.probs)\nm1.probs = rep(epsilon/100, 100)\nm1.probs[84] = 1 - (99/100)*epsilon # sum(m1.probs) length(m1.probs)\nm2.probs = rep(epsilon/100, 100)\nm2.probs[34] = 1 - (99/100)*epsilon # sum(m2.probs) length(m2.probs)\n\nb=.2\n# Sender expected utilities\nEU.s = rep(0, 100)\nfor (s in c(1:100)){\n  print(s)\n  t.star = s/100\n  # sending message m1\n  EU.s.m1 = NULL\n  for (t in c(1:s)){\n    for (a in c(1:100)){\n      EU.s.m1 = append(EU.s.m1, t.probs[t]*m1.probs[a]*(1 - (t/100 - a/100 - (1-t/100)*b )**2))\n    }    \n  }\n  # sending message m2\n  EU.s.m2 = NULL  \n  for (t in c(1:s)){\n    for (a in c(1:100)){\n      EU.s.m2 = append(EU.s.m2, t.probs[t]*m2.probs[a]*(1 - (t/100 - a/100 - (1-t/100)*b )**2))\n    }    \n  }\n  EU.s[s] = sum(EU.s.m1) + sum(EU.s.m2)\n}\n\nplot(EU.s)\n\n# Discrete-time Replicator equation\nx,i.next = x.i*(s.i/s.bar) # proportion of x.i at next point in time is proportion times fitness divided by average fitness\n\n\n\ns1 = dbetabinom.ab(x=1:100, size=100, shape1=4, shape2=2)\nplot(s1, type='l', yaxt='n', ylab='', xaxt='n', xlab='Discourse Status')\ns2 = dbetabinom.ab(x=1:100, size=100, shape1=3, shape2=2)\nplot(s2, type='l', yaxt='n', ylab='', xaxt='n', xlab='Discourse Status')\ns3 = dbetabinom.ab(x=1:100, size=100, shape1=2, shape2=2)\nplot(s3, type='l', yaxt='n', ylab='', xaxt='n', xlab='Discourse Status')\n",
    "created" : 1424127128110.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2926625472",
    "id" : "EAED8FFB",
    "lastKnownWriteTime" : 1425277269,
    "path" : "~/Dropbox/dissertation/plots.R",
    "project_path" : "plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}