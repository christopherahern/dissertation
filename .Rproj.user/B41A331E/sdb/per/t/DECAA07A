{
    "contents" : "# Load libraries\nlibrary(dplyr)\nlibrary(mgcv)\nlibrary(ggplot2)\nlibrary(reshape2)\n# Read in the data\nDH.data.full = read.csv('~/Dropbox/Ahern-Tamminga-Ecay-shared/code/dh.p.nodel.csv', header=T, sep=',')\nDH.data = data.frame(speaker = as.numeric(DH.data.full$File),\n                  obs = DH.data.full$code1,\n                  time = DH.data.full$Seg_Start,\n                  prev = as.factor(DH.data.full$PrevDH1),\n                  lag = as.numeric(DH.data.full$Lag))\nDH.data = tbl_df(DH.data)\n# Get speaker means and sort them in descending order\nDH.speaker.means = DH.data %>% group_by(speaker) %>% summarize(spk.mean = sum(obs)/n()) %>% arrange(desc(spk.mean))\n# Check out the range of speaker means for DH-stopping\nggplot(DH.speaker.means, aes(x=spk.mean)) + geom_histogram(aes(y=..density..), binwidth=.05) + geom_density()\nDH.speaker.means\n# Explore data for individual speaker\n# set plots.only=F if you want model summaries and model comparison\nexamine.spkr = function(df, spkr, plots.only=TRUE) {\n  print(spkr)\n  # Get subset of data for that speaker\n  data.test = filter(df, speaker==spkr)\n  # Fit GAMs and plot results\n  # (1) priming\n  gam1 = gam(obs ~ prev, family=\"binomial\", data = data.test)\n  # (2) style\n  gam2 = gam(obs ~ s(time), family=\"binomial\", data = data.test)\n  # (3) style and priming\n  gam3 = gam(obs ~ s(time) + prev, family=\"binomial\", data = data.test)\n  # Add predicted values to data frame\n  data.test$gam1 = predict(gam1, type=\"response\")\n  data.test$gam2 = predict(gam2, type=\"response\")\n  data.test$gam3 = predict(gam3, type=\"response\")\n  # Output model summaries if plots.only=FALSE\n  if (plots.only==FALSE){\n    # Print summary of models\n    print(summary(gam1))\n    readline(\"Press <return to continue\")\n    print(summary(gam2))\n    readline(\"Press <return to continue\")    \n    print(summary(gam3))\n    readline(\"Press <return to continue\")\n    # Print comparison of nested models\n    print(anova.gam(gam1, gam3, test=\"Chisq\")) # Should this be Chisq?\n    print(anova.gam(gam2, gam3, test=\"Chisq\"))\n    readline(\"Press <return to continue\")\n  }\n  readline(\"Press <return to continue\") \n  # Plot the three predicted values from the models\n  #plot(data.test$time, predict(gam1, type=\"response\"), ylim=c(0,1),main=paste(spkr,\":\", deparse(as.formula(gam1))))\n  g1 = ggplot(data.test, aes(time, y = gam1, color=prev)) + geom_point(size = 4,alpha=.4) + coord_cartesian(ylim = c(0, 1)) + ggtitle(paste(\"Speaker\",spkr,\":\", deparse(as.formula(gam1)))) + ylab(\"Predicted probability\") + xlab(\"Time\")\n  print(g1)\n  readline(\"Press <return to continue\") \n  #plot(data.test$time, predict(gam2, type=\"response\"), ylim=c(0,1),main=paste(spkr,\":\", deparse(as.formula(gam2))))  \n  g2 = ggplot(data.test, aes(time, y = gam2)) + geom_point(size = 4,alpha=.4) + coord_cartesian(ylim = c(0, 1)) + ggtitle(paste(\"Speaker\",spkr,\":\", deparse(as.formula(gam2))))\n  print(g2)\n  readline(\"Press <return to continue\") \n  #plot(data.test$time, predict(gam3, type=\"response\"), ylim=c(0,1),main=paste(spkr,\":\", deparse(as.formula(gam3))))  \n  g3 = ggplot(data.test, aes(time, y = gam3, color=prev)) + geom_point(size = 4,alpha=.4) + coord_cartesian(ylim = c(0, 1)) + ggtitle(paste(\"Speaker\",spkr,\":\", deparse(as.formula(gam3))))\n  #+ theme(legend.position=\"none\") # Comment this out to get legend. blue: 1; red: 0\n  print(g3) \n}\n# What should we expect?\n# Priming: previous token should have some effect on current.\n# Visually: blues higher than reds\n# Style: if speaker style shifts, GAM should track this\n# Visually: dots should move up and down depending on shifts in style\n\n# # Some of the potentially more \"dynamic\" (squiggly) speakers for closer looks\nexamine.spkr(DH.data,16)\nexamine.spkr(DH.data,22)\nexamine.spkr(DH.data,27)\nexamine.spkr(DH.data,28)\nexamine.spkr(DH.data,34)\nexamine.spkr(DH.data,37)\nexamine.spkr(DH.data,38)\nexamine.spkr(DH.data,40)\nexamine.spkr(DH.data,41)\nexamine.spkr(DH.data,42)\n\n\n# Loop over all speakers\nexamine.all = function(df,plots.only=TRUE) {\n  for (spkr in unique(df$speaker)){\n    examine.spkr(df, spkr, plots.only=plots.only)\n  }\n}\n#examine.all(DH.data)\n#examine.all(DH.data,plots.only=F) # in for the long haul\n# Let's try this out with ING data\nING.data.full = read.csv(\"../data/PNC_ing_master.txt\", header=T, sep=\"\\t\")\nING.data = data.frame(speaker = ING.data.full$File,\n                     obs = ING.data.full$code,\n                     time = ING.data.full$Word_End,\n                     prev = as.factor(lag(ING.data.full$code)),\n                     gram = ING.data.full$newgram)\n\nING.data = tbl_df(ING.data)\nING.data = ING.data %>% dplyr::filter(obs != \"na\" & prev != \"na\") %.% dplyr::filter(gram == \"p\" | gram == \"g\") \nING.data$obs = as.numeric(as.character(ING.data$obs))\n# Get speaker means and sort them in descending order\nING.speaker.means = ING.data %>% dplyr::group_by(speaker) %>% dplyr::summarize(spk.mean = sum(obs)/n()) %>% dplyr::arrange(desc(spk.mean)) %>% dplyr::arrange(desc(spk.mean)) %>% dplyr::arrange(spk.mean)\nING.speaker.means = filter(ING.speaker.means, spk.mean != 0 & spk.mean != 1)\n# Plot the distribution: looks a bit bimodal\nggplot(ING.speaker.means, aes(x=spk.mean)) + geom_histogram(aes(y=..density..), binwidth=.05) + geom_density()\n# Discard speakers who don't vary\nING.data = tbl_df(filter(merge(ING.data, ING.speaker.means), spk.mean != 1 & spk.mean != 0))\n# Try out on one of the interesting cases from above\nexamine.spkr(ING.data,\"PH00-1-4-A-BDAddario\")\nexamine.spkr(ING.data,\"PH00-1-4-A-BDAddario\", plots.only=F)\nexamine.all(ING.data)\n",
    "created" : 1424713429819.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1263494697",
    "id" : "DECAA07A",
    "lastKnownWriteTime" : 1424627204,
    "path" : "~/Dropbox/holding/gam-test/holding-gam-notes.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}